post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("theta = 1", "theta = 2", "theta = 3","theta = 4"))
like = rep(NA,4)
for (k in 1:4){like[k]<-k^(-3)*exp(-8/k)}
normLike <- like/sum(like)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("theta = 1", "theta = 2", "theta = 3","theta = 4","theta = 1", "theta = 2", "theta = 3","theta = 4","theta = 1", "theta = 2", "theta = 3","theta = 4"))
like = rep(NA,4)
for (k in 1:4){like[k]<-k^(-3)*exp(-8/k)}
normLike <- like/sum(like)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("1", "theta = 2", "theta = 3","theta = 4","theta = 1", "theta = 2", "theta = 3","theta = 4","theta = 1", "theta = 2", "theta = 3","theta = 4"))
like = rep(NA,4)
for (k in 1:4){like[k]<-k^(-3)*exp(-8/k)}
normLike <- like/sum(like)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("1", "2", "3","4","1", "2", "3","4","1", "2", "3","4"))
like = rep(NA,4)
for (k in 1:4){like[k]<-k^(-3)*exp(-8/k)}
normLike <- like/sum(like)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("1", "2", "3","4","1", "2", "3","4","1", "2", "3","4"), xlab='expression(theta)')
like = rep(NA,4)
for (k in 1:4){like[k]<-k^(-3)*exp(-8/k)}
normLike <- like/sum(like)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
barplot(cbind(prior, normLike, post), beside=TRUE, names.arg = c("1", "2", "3","4","1", "2", "3","4","1", "2", "3","4"), xlab=expression(theta))
barplot(prior)
barplot(prior, names.arg = c("1", "2", "3","4")
barplot(prior, names.arg = c("1", "2", "3","4"))
barplot(prior, names.arg = c("1", "2", "3","4"))
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
par(mfrow = c(1,3))
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps", onefile=FALSE, horizontal=FALSE)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps", onefile=FALSE, horizontal=FALSE, width = 200)
onefile=FALSE, horizontal=FALSE, width = 200, height = 500)
onefile=FALSE, horizontal=FALSE, width = 200, height = 500)
onefile=FALSE, horizontal=FALSE, width = 200)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 200)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 200m height = 500)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 200m height = 500)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 200, height = 500)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 200, height = 500)
x11(width=4cm, height=6cm)
x11(width=4, height=6)
x11(width=6, height=6)
x11(width=12, height=6)
post <- unNormPost/sum(unNormPost)
x11(width=12, height=6)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 12, height = 6)
prior <- c(0.4,0.3,0.2,0.1)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
x11(width=15, height=6)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 15, height = 6)
unNormPost <- prior*post
post <- unNormPost/sum(unNormPost)
x11(width=15, height=4)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 15, height = 4)
post <- unNormPost/sum(unNormPost)
x11(width=20, height=4)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 20, height = 4)
post <- unNormPost/sum(unNormPost)
x11(width=20, height=5)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 20, height = 5)
x11(width=20, height=4)
par(mfrow = c(1,3), width = 400)
barplot(prior, names.arg = c("1", "2", "3","4"), main = 'Prior')
barplot(normLike, names.arg = c("1", "2", "3","4"), main = 'Normalized likelihood')
barplot(post, names.arg = c("1", "2", "3","4"), main = 'Posterior')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamPriorPost.eps",
onefile=FALSE, horizontal=FALSE, width = 20, height = 4)
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
plot(xSeq,dexp(x=xSeq, rate = 1/theta))
?dexp
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta))
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta))
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta))
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta))
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "t", xlab = "x", ylab = "density")
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "t", xlab = "x", ylab = "density")
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "t", xlab = "x", ylab = "density")
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "t", xlab = "x", ylab = "density")
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, col = 'red')
?points
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,4), col = 'red')
theta <- 2
x
?points
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,4), col = 'red', pch = rep(1,4), bg = "grey")
theta <- 2
points(x, rep(0,length(x)), col = 'red', pch = rep(1,4), bg = "grey")
points(x, rep(0,length(x)), col = 'red', pch = rep(2,4), bg = "grey")
points(x, rep(0,length(x)), col = 'red', pch = rep(4,4), bg = "grey")
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = rep(4,4), bg = "grey")
points(x, rep(0,length(x)), col = 'red', pch = 'o', bg = "grey")
xSeq <- seq(0,10,by=0.01)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = 'o', bg = "grey")
points(x, rep(0,length(x)), col = 'red', pch = 'bo', bg = "grey")
points(x, rep(-0.05,length(x)), col = 'red', pch = 'o', bg = "grey")
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(-0.05,length(x)), col = 'red', pch = 'o', bg = "grey")
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density", ylim = c(0,1))
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density", ylim = c(0,1))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density", ylim = c(0,1))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density", ylim = c(0,1))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "density", ylim = c(0,1))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = expression(theta))
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta), " = 1")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta), " = 1")
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta), " = 1")
points(x, rep(0,length(x)), col = 'red', pch = 'o')
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta), " = 1"))
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = expression(theta=1))
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta=1), " = 1"))
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste(expression(theta), " = 1"))
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste('theta = 1'))
x <- c(1.3, 3.1, 3.6)
par(mfrow = c(2,2))
xSeq <- seq(0,10,by=0.01)
theta <- 1
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste('theta = 1'))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 2
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste('theta = 2'))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 3
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste('theta = 3'))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
theta <- 4
plot(xSeq,dexp(x=xSeq, rate = 1/theta), type = "l", xlab = "x", ylab = "", ylim = c(0,1), main = paste('theta = 4'))
points(x, rep(0,length(x)), col = 'red', pch = 'o')
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamLikelihood.eps",
onefile=FALSE, horizontal=FALSE, width = 10, height = 10)
dev.print(device=postscript, "/home/mv/Dropbox/Projects/BayesBook/Figures/DiscreteParamLikelihood.eps",
onefile=FALSE, horizontal=FALSE, width = 16, height = 8)
Metropolis <- function(logPostObj, ...){
theta <- 2
return <- logPostObj(theta,...)
}
Metropolis(myPosterior, data)
myPosterior <- function(theta, s, f, a, b){
post <- theta^(s+a-1)*(1-theta)^(f+b-1)
return(post)
}
myPosterior(theta = 0.1,s = 8, f = 2, a = 1, b = 1)
LogPostBernBeta <- function(theta, s, f, a, b){
logPost <- (s+a-1)*log(theta) + (f+b-1)*log(1-theta)
return(logPost)
}
post <- LogPostBernBeta(theta = 0.1,s = 8, f = 2, a = 1, b = 1) # First for a single theta value  ...
post
logPostMany <- LogPostBernBeta(theta = seq(0,1,by=.01),s = 8, f = 2, a = 1, b = 1) # ... the for a whole vector of values
logPost <- LogPostBernBeta(theta = thetas,s = 8, f = 2, a = 1, b = 1)
plot(thetas,logPost)
thetas <- seq(0,1,by=.01)
logPost <- LogPostBernBeta(theta = thetas,s = 8, f = 2, a = 1, b = 1)
plot(thetas,logPost)
plot(thetas,exp(logPost),main = 'Posterior')
plot(thetas,exp(logPost),main = 'Posterior', type = 'l')
lines(thetas,dbeta(thetas,shape1= s + a, shape2 = f + b))
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0,1,by=.01)
logPost <- LogPostBernBeta(theta = thetas,s = 8, f = 2, a = 1, b = 1)
plot(thetas,exp(logPost),main = 'Posterior', type = 'l')
lines(thetas,dbeta(thetas,shape1= s + a, shape2 = f + b))
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0,1,by=.01)
logPost <- LogPostBernBeta(theta = thetas,s = 8, f = 2, a = 1, b = 1)
plot(thetas,exp(logPost),main = 'Unnormalized posterior', type = 'l')
LogPostBernBeta <- function(theta, s, f, a, b){
logPost <- (s+a-1)*log(theta) + (f+b-1)*log(1-theta)
return(sum(logPost))
}
# Testing if the log posterior function works
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0,1,by=.01)
logPost <- LogPostBernBeta(theta = thetas,s = 8, f = 2, a = 1, b = 1)
logPost
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0,1,by=.01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
logPost
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
logPost
Metropolis <- function(logPostObj, ...){
theta <- 2
logPost <- logPostObj(theta,...)
return(2*logPost)
}
Metropolis(LogPostBernBeta,s,f,a,b)
Metropolis <- function(logPostObj, ...){
theta <- 0.3
logPost <- logPostObj(theta,...)
return(2*logPost)
}
Metropolis(LogPostBernBeta,s,f,a,b)
LogPostBernBeta(theta = 0.3, s, f, a, b)
LogPostBernBeta(theta = 0.3, s, f, a, b)*2
LogPostBernBeta <- function(theta, s, f, a, b){
logPost <- (s+a-1)*log(theta) + (f+b-1)*log(1-theta)
return(sum(logPost))
}
# Testing if the log posterior function works
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
MultiplyByTwo <- function(myFunction, ...){
x <- 0.3
y <- myFunction(x,...)
return(2*y)
}
MultiplyByTwo(LogPostBernBeta,s,f,a,b)
LogPostBernBeta <- function(theta, s, f, a, b){
logPost <- (s+a-1)*log(theta) + (f+b-1)*log(1-theta)
return(logPost)
}
# Testing if the log posterior function works
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
# This is a rather useless function that takes the function myFunction, evaluates it at x = 0.3,
# and then returns two times the function value.
MultiplyByTwo <- function(myFunction, ...){
x <- 0.3
y <- myFunction(x,...)
return(2*y)
}
MultiplyByTwo(LogPostBernBeta,s,f,a,b)
# Testing if the log posterior function works
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
plot(thetas, logPost, type ="l", main = 'Unnormalized beta posterior')
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b) # First for a single theta value  ...
# ... then for a whole vector of values
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
plot(thetas, exp(logPost), type ="l", main = 'Unnormalized beta posterior')
LogPostBernBeta <- function(theta, s, f, a, b){
logPost <- (s+a-1)*log(theta) + (f+b-1)*log(1-theta)
return(logPost)
}
# Testing if the log posterior function works
# First for a single theta value, then for a whole vector of values
s = 8;f = 2;a = 1;b = 1
logPost <- LogPostBernBeta(theta = 0.1, s, f, a, b)
thetas <- seq(0.001, 0.999, by = .01)
logPost <- LogPostBernBeta(theta = thetas, s, f, a, b)
plot(thetas, exp(logPost), type ="l", main = 'Unnormalized beta posterior') # Note the exp()
# This is a rather useless function that takes the function myFunction, evaluates it at x = 0.3,
# and then returns two times the function value.
MultiplyByTwo <- function(myFunction, ...){   x <- 0.3   y <- myFunction(x,...)   return(2*y) }
MultiplyByTwo(LogPostBernBeta,s,f,a,b)
setwd('/home/mv/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/')
nBurnin <- 1000
nIter <- 1000
modelFile <- 'BernBeta.txt'
# Data
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
# Initial values
inits <- list(p = 0.5,p = 0.1)
inits[[1]]
inits <- list(list(p = 0.5),list(p = 0.1)
Results <- BRugsFit(modelFile, data, inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
inits <- list(list(p = 0.5),list(p = 0.1))
inits[[1]]
inits[[2]]
Results <- BRugsFit(modelFile, data, inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
library(BRugs)
setwd('/home/mv/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/')
nBurnin <- 1000
nIter <- 1000
modelFile <- 'BernBeta.txt'
# Data
data <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
# Initial values
inits <- list(list(p = 0.5),list(p = 0.1))
Results <- BRugsFit(modelFile, data, inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
Results <- BRugsFit(modelFile = modelFile, data = bernData, inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
Results <- BRugsFit(modelFile = modelFile, data = bernData.txt, inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
Results <- BRugsFit(modelFile = modelFile, data = "bernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
bernData <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
bugsData(c('n', 'a', 'b', 'x'),'BernData.txt') # Sets up a separate data file in bugs format
# Initial values
inits <- list(list(p = 0.5),list(p = 0.1))
Results <- BRugsFit(modelFile = modelFile, data = "bernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
Results <- BRugsFit(modelFile = modelFile, data = "BernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
bugsData(c('n', 'a', 'b', 'x'),'BernData.txt') # Sets up a separate data file in bugs format
# Initial values
inits <- list(list(p = 0.5),list(p = 0.1))
Results <- BRugsFit(modelFile = modelFile, data = "BernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
setwd('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/')
nBurnin <- 1000
nIter <- 1000
modelFile <- 'BernBeta.txt'
# Data
bernData <- list(x = c(1,1,0,0,1,1,1,1,0,1), n = length(x), a = 1, b = 1)
bugsData(c('n', 'a', 'b', 'x'),'BernData.txt') # Sets up a separate data file in bugs format
# Initial values
inits <- list(list(p = 0.5),list(p = 0.1))
Results <- BRugsFit(modelFile = modelFile, data = "BernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
bugsData(c('n', 'a', 'b', 'x'),'BernData.txt') # Sets up a separate data file in bugs format
x = c(1,1,0,0,1,1,1,1,0,1)
n = length(x)
a = 1
b = 1
bugsData(c('n', 'a', 'b', 'x'),'BernData.txt') # Sets up a separate data file in bugs format
# Initial values
inits <- list(list(p = 0.5),list(p = 0.1))
Results <- BRugsFit(modelFile = modelFile, data = "BernData.txt", inits = inits, numChains = 2, parametersToSave = c("p"), nBurnin, nIter, nThin = 1, coda = FALSE, DIC = TRUE)
res <- samplesHistory(node = '*', plot = FALSE) # Plot the draws for all (hence the *) variables
res
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
hist(res[[1]][,2], 30, main = 'Posterior of p - second chain') # histogram of draws of a from the first Markov Chain
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "r")
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
hist(res[[1]][,1], 30, freq = TRUE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
hist(res[[1]][,1], 30, freq = FALSE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
hist(res[[1]][,2], 30, main = 'Posterior of p - second chain') # histogram of draws of a from the first Markov Chain
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, freq = FALSE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
lines(dbeta(x=seq(0,1,by=0.01), shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
dbeta(x=seq(0,1,by=0.01)
''
pSeq <- seq(0,1,by=0.01)
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, freq = FALSE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
pSeq <- seq(0,1,by=0.01)
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, freq = FALSE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
hist(res[[1]][,2], 30, main = 'Posterior of p - second chain') # histogram of draws of a from the first Markov Chain
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
pSeq <- seq(0,1,by=0.01)
par(mfrow = c(1,2))
hist(res[[1]][,1], 30, freq = FALSE, main = 'Posterior of p - first chain') # histogram of draws of a from the first Markov Chain
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
hist(res[[1]][,2], 30, freq = FALSE, main = 'Posterior of p - second chain') # histogram of draws of a from the first Markov Chain
lines(pSeq, dbeta(pSeq, shape1 = sum(x) + a, shape2 = n - sum(x) + b), col = "red")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
legend(c('MCMC approximation','True density'), col=c('black','red'))
?legend
legend(legens = c('MCMC approximation','True density'), col=c('black','red'))
legend(legend = c('MCMC approximation','True density'), col=c('black','red'))
legend = c("topright", inset=.05,'MCMC approximation','True density'), col=c('black','red'))
legend("topright", inset=.05, legend = c('MCMC approximation','True density'), col=c('black','red'))
legend("topright", inset=.05, legend = c('MCMC approximation','True density'), lty =c(1,1),col=c('black','red'))
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBeta.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/HeightWeight.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBetaHierarchy.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBetaHierarchy.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/BernBetaHierarchy.R')
source('~/Dropbox/Teaching/BayesLearn2012/Code/OpenBugs/LogisticRegRandEffects.R')
